heat_template_version: 2014-10-16

description: >
  A template which provides a creates a loadbalancer using neutron's LBaaS.

parameters:

  key_name:
    description: >
      A pre-submitted SSH key to access the VM hosts
    type: string
    constraints:
    - custom_constraint: nova.keypair

  image:
    description: >
      Select a base image to use for the infrastructure server
    type: string
    constraints:
    - custom_constraint: glance.image

  flavor:
    description: >
      Define the hardware characteristics for the VMs: CPU, Memory, base disk
    type: string
    constraints:
    - custom_constraint: nova.flavor

  hostname:
    description: >
      The load balancer hostname portion of the FQDN
    type: string

  domain_name:
    description: >
      All VMs will be placed in this domain
    type: string

  rhn_username:
    description: >
      A valid user with entitlements to RHEL and OpenShift software repos
    type: string

  rhn_password:
    description: >
      The password for the RHN user
    type: string
    hidden: true

  rhn_pool:
    description: >
      A subscription pool containing the RHEL and OpenShift software repos
      OPTIONAL
    type: string
    hidden: true

  extra_rhn_pools:
    type: comma_delimited_list
    description: List of rhn pools which will be installed on each node.
    default: ''

  dns_ip:
    description: IP address of the DNS server
    type: string

  ssh_user:
    description: >
      The user for SSH access to the VM hosts
    type: string

  ansible_public_key:
    description: >
      The SSH public key that Ansible will use to access master and node hosts
      This will be placed on each VM host in /root/.ssh/authorized_keys
    type: string

  fixed_subnet:
    description: >
      The name or ID of the internal IPv4 space
    type: string
    constraints:
    - custom_constraint: neutron.subnet

  members:
    type: comma_delimited_list

  master_hostname:
    type: string

  floatingip_id:
    type: string

  fixed_network:
    description: >
      The name or ID of the internal network
    type: string
    constraints:
    - custom_constraint: neutron.network

  fixed_subnet:
    description: >
      The name or ID of the internal IPv4 space
    type: string
    constraints:
    - custom_constraint: neutron.subnet

  extra_repository_urls:
    type: comma_delimited_list
    description: List of repository URLs which will be installed on each node.
    default: ''

  extra_docker_repository_urls:
    type: comma_delimited_list
    description: List of docker repository URLs which will be installed on each node, if a repo is insecure use '#insecure' suffix.
    default: ''

  # Delay openshift installation until the master is ready to accept
  timeout:
    description: Time to wait until the master setup is ready.
    type: number
    default: 4000

resources:
  floating_ip_assoc:
    type: OS::Neutron::FloatingIPAssociation
    properties:
      port_id: {get_resource: port}
      floatingip_id: {get_param: floatingip_id}

  # bind the IP to the host with security port filters
  port:
    type: OS::Neutron::Port
    properties:
      security_groups:
      - {get_resource: security_group}
      network: {get_param: fixed_network}
      fixed_ips:
      - subnet: {get_param: fixed_subnet}
      replacement_policy: AUTO

  # Define network access policy for access to the laod balancer
  security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      rules:
      - protocol: icmp
      - protocol: tcp
        port_range_min: 8443
        port_range_max: 8443
      - protocol: tcp
        port_range_min: 22
        port_range_max: 22

  # The VM which will host the load balancer service
  host:
    type: OS::Nova::Server
    properties:
      name:
        str_replace:
          template: "%stackname%-%hostname%"
          params:
            '%stackname%': {get_param: 'OS::stack_name'}
            '%hostname%': {get_param: hostname}
      admin_user: {get_param: ssh_user}
      image: {get_param: image}
      flavor: {get_param: flavor}
      key_name: {get_param: key_name}
      networks:
      - port: {get_resource: port}
      user_data_format: SOFTWARE_CONFIG
      user_data: {get_resource: init}

  # Collect a set of host configuration information in a single structure
  init:
    type: OS::Heat::MultipartMime
    properties:
      parts:
      - config: {get_resource: set_hostname}
      - config: {get_resource: included_files}
      - config: {get_resource: rhn_register}
      - config: {get_resource: set_extra_repos}
      - config: {get_resource: set_extra_docker_repos}
      - config: {get_resource: host_update}
      - config: {get_resource: lb_boot}

  # Compose the FQDN and set the hostname in the cloud-init data structure
  set_hostname:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        hostname: {get_param: hostname}
        fqdn:
          str_replace:
            template: "HOST.DOMAIN"
            params:
              HOST: {get_param: hostname}
              DOMAIN: {get_param: domain_name}

  # Compile a set of standard configuration files to provide identity and access
  included_files:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        write_files:
        - path: /usr/bin/retry
          permissions: 0755
          content: {get_file: fragments/retry.sh}
        ssh_authorized_keys:
        - {get_param: ansible_public_key}

  # Connect to a software source for updates on RHEL
  rhn_register:
    type: OS::Heat::SoftwareConfig
    properties:
      config:
        str_replace:
          params:
            $RHN_USERNAME: {get_param: rhn_username}
            $RHN_PASSWORD: {get_param: rhn_password}
            $POOL_ID: {get_param: rhn_pool}
            $EXTRA_POOL_IDS:
              list_join:
                - " --pool="
                - {get_param: extra_rhn_pools}
          template: {get_file: fragments/rhn-register.sh}

  # Enable any extra repositories
  set_extra_repos:
    type: OS::Heat::SoftwareConfig
    properties:
      config:
        str_replace:
          params:
            $REPOLIST:
              list_join:
                - " "
                - {get_param: extra_repository_urls}
          template: {get_file: fragments/set-extra-repos.sh}

  set_extra_docker_repos:
    type: OS::Heat::SoftwareConfig
    properties:
      config:
        str_replace:
          params:
            $REPOLIST:
              list_join:
                - " "
                - {get_param: extra_docker_repository_urls}
          template: {get_file: fragments/set-extra-docker-repos.sh}

  # Insure that the host software is current
  host_update:
    type: OS::Heat::SoftwareConfig
    properties:
      config:
        get_file: fragments/host-update.sh

  # Prepare the host for SSH access for ansible
  lb_boot:
    type: OS::Heat::SoftwareConfig
    properties:
      config:
        str_replace:
          params:
            $DNS_IP: {get_param: dns_ip}
            $WC_NOTIFY: { get_attr: ['wait_handle', 'curl_cli'] }
          template: {get_file: fragments/lb-boot.sh}

  # Wait for the load balancer host to complete cloud-init or time out
  wait_condition:
    type: OS::Heat::WaitCondition
    properties:
      handle: {get_resource: wait_handle}
      timeout: {get_param: timeout}

  # Provide a curl CLI to the cloud-init script.  On completion, notify Heat
  wait_handle:
    type: OS::Heat::WaitConditionHandle

outputs:
  console_url:
    description: URL of the OpenShift web console
    value:
      str_replace:
        template: "https://%stackname%-%hostname%.%domainname%:8443/console/"
        params:
          '%stackname%': {get_param: 'OS::stack_name'}
          '%hostname%': {get_param: hostname}
          '%domainname%': {get_param: domain_name}

  api_url:
    description: URL entrypoint to the OpenShift API
    value:
      str_replace:
        template: "https://%stackname%-%hostname%.%domainname%:8443/"
        params:
          '%stackname%': {get_param: 'OS::stack_name'}
          '%hostname%': {get_param: hostname}
          '%domainname%': {get_param: domain_name}
